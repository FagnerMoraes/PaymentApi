// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentApi.Data.Context;

#nullable disable

namespace PaymentApi.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230129173246_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PaymentApi.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("TB_ORDER", (string)null);
                });

            modelBuilder.Entity("PaymentApi.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("TB_ORDERITEM", (string)null);
                });

            modelBuilder.Entity("PaymentApi.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("MONEY")
                        .HasColumnName("COL_PRICE_PRODUCT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("COL_TITLE_PRODUCT");

                    b.HasKey("Id");

                    b.ToTable("TB_PRODUCT", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d2b0228-4d0d-4c23-8b49-01a698857709"),
                            Price = 2m,
                            Title = "Produto 01"
                        },
                        new
                        {
                            Id = new Guid("9d2b0228-4d0d-4c23-8b49-01a698857708"),
                            Price = 2m,
                            Title = "Produto 02"
                        });
                });

            modelBuilder.Entity("PaymentApi.Domain.Entities.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TB_SELLER", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d2b0228-4d0d-4c23-8b49-01a698857702"),
                            CPF = "11111111",
                            Email = "teste@teste.com",
                            Name = "Vendedor01",
                            Telefone = "123123"
                        },
                        new
                        {
                            Id = new Guid("9d2b0228-4d0d-4c23-8b49-01a698857703"),
                            CPF = "11111221",
                            Email = "teste@teste.com",
                            Name = "Vendedor02",
                            Telefone = "123123"
                        });
                });

            modelBuilder.Entity("PaymentApi.Domain.Entities.Order", b =>
                {
                    b.HasOne("PaymentApi.Domain.Entities.Seller", "Seller")
                        .WithMany("Orders")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("PaymentApi.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("PaymentApi.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentApi.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PaymentApi.Domain.Entities.Seller", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
